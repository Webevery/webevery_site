{"version":3,"file":"static/js/369.ef1fd3f8.chunk.js","mappings":"kMACA,GAAgB,IAAM,0BAA0B,cAAgB,oCAAoC,SAAW,+BAA+B,cAAc,kCAAkC,gBAAgB,qC,6BC6L9M,EArGqB,WAEjB,IAAQA,GAAaC,EAAAA,EAAAA,IAAc,CAC/BC,iBAAkBC,CAAAA,SAAAA,aAAAA,WAAAA,iBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,2BAD1BJ,SAoBR,GAA4BK,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KAEA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KAEA,GAA4CJ,EAAAA,EAAAA,YAA5C,eAAOK,EAAP,KAAuBC,EAAvB,KA0BA,OACI,oBAASC,UAAWC,EAAAA,IAApB,SACMb,GAIE,SAAC,KAAD,CACIc,sBAAuBD,EAAAA,cAKvBE,OAlCE,SAACC,GACfT,EAAUS,GAGV,IAAMC,EAAS,IAAIC,OAAOC,KAAKC,aAItB,OAATC,EAAAA,SAAS,IAATA,EAAAA,IAAAA,EAAAA,GAAAA,SAAmB,gBAAaC,EAAb,EAAGC,SAA0BC,EAA7B,EAAkBC,UAAlB,OAAuCR,EAAOS,OAAO,CAAEJ,IAAAA,EAAKE,IAAAA,GAA5D,IAGnBR,EAAIW,UAAUV,EACjB,EAuBeW,QAAS,kBAAMnB,GAAU,EAAhB,EAPb,SASKY,EAAAA,GAAAA,KAAc,gBAAGQ,EAAH,EAAGA,GAAcP,EAAjB,EAAOC,SAA0BC,EAAjC,EAAsBC,UAAgBK,EAAtC,EAAsCA,KAAMC,EAA5C,EAA4CA,KAAMC,EAAlD,EAAkDA,MAAOC,EAAzD,EAAyDA,MAAzD,OACX,SAAC,KAAD,CAEIrB,UAAWC,EAAAA,OACXqB,SAAU,CAAEZ,IAAAA,EAAKE,IAAAA,GAGjBW,KAAM,qDAENP,QAAS,YA9BP,SAACC,EAAIP,EAAKE,EAAKM,EAAMC,EAAMC,EAAOC,GAClD,OAAN3B,QAAM,IAANA,GAAAA,EAAQ8B,MAAM,CAAEd,IAAAA,EAAKE,IAAAA,IACrBb,EAAkB,CAAEkB,GAAAA,EAAIC,KAAAA,EAAMC,KAAAA,EAAMC,MAAAA,EAAOC,MAAAA,IAC3CxB,GAAU,EACb,CA0BwC4B,CAAkBR,EAAIP,EAAKE,EAAKM,EAAMC,EAAMC,EAAOC,EAAQ,EARhF,SAYKzB,IAAwB,OAAdE,QAAc,IAAdA,OAAA,EAAAA,EAAgBmB,MAAOA,IAAO,SAAC,KAAD,CACrCjB,UAAWC,EAAAA,YACXyB,aAAc,WAAQ7B,GAAU,EAAQ,EAFH,UAIrC,iBAAKG,UAAWC,EAAAA,SAAhB,WACI,uBAAIH,EAAeqB,QACnB,uBAAIrB,EAAeoB,QACnB,SAAC,KAAD,CAAMS,GAAE,cAAS7B,EAAeuB,OAAhC,SAA0CvB,EAAeuB,SACzD,SAAC,KAAD,CAAMM,GAAE,iBAAY7B,EAAesB,OAAnC,SAA6CtB,EAAesB,cAnB/DH,EAFE,OAZnB,wCA2Cf,EC/KD,EARiB,WACf,OACE,+BACE,SAAC,EAAD,KAGL,C","sources":["webpack://webevery_site/./src/components/screens/ContactsPage/ContactsPage.module.scss?ada3","components/screens/ContactsPage/ContactsPage.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"app\":\"ContactsPage_app__0+NyW\",\"map_container\":\"ContactsPage_map_container__Szp+l\",\"infoData\":\"ContactsPage_infoData__G7kmf\",\"gm-style-iw\":\"ContactsPage_gm-style-iw__vVMRq\",\"gm-style-iw-c\":\"ContactsPage_gm-style-iw-c__N+y-V\"};","// // 1-st example\n// import React, { useState } from 'react';\n// import { coworkers } from \"data/coworkers.data\";\n// import styles from \"./ContactsPage.module.scss\";\n\n\n// const ContactsPage = () => {\n//     const [coworkerLocation, setCoworkerLocation] = useState(\"\");\n\n//     const openOrCloseMap = (array, id) => {\n//         if (!coworkerLocation) {\n//             const currentCoworker = array.find(item => item.id === id);\n//             setCoworkerLocation(currentCoworker.location)\n//             console.log(currentCoworker);\n//         } else setCoworkerLocation(\"\")\n//     }\n\n//     const coworker = coworkers.map(({ id, name, city, country, location, email, phone }) => (\n//         <li className={styles.coworker} key={id}>\n//             <p className={styles.coworkerInformation}>{name}, {country}, {city}, {email}, {phone}</p>\n\n//             <button\n//                 type=\"button\"\n//                 className={styles.buttonOpenOrCloseMap}\n//                 id={id}\n//                 onClick={() => openOrCloseMap(coworkers, id)}\n//                 disabled={(coworkerLocation !== \"\" && location !== coworkerLocation)}\n//                 aria-label=\"Open or close map\"\n//             >{location === coworkerLocation ? \"Close map\" : \"Open map\"}\n//             </button>\n//         </li >\n//     )\n//     );\n\n\n//     return (\n//         <section className={styles.wrapper}>\n//             <ul className={styles.contactsPageList}>{coworker}</ul>\n\n//             {coworkerLocation ? <iframe className={styles.coworkerMap} title={coworker.name} src={coworkerLocation} allowFullScreen=\"\" loading=\"lazy\" referrerPolicy=\"no-referrer-when-downgrade\"></iframe> : null}\n//         </section>\n//     );\n// }\n\n\n// export default ContactsPage;\n\n\n\n\n\n\n\n// 2-nd example\n// import React from 'react';\n// import { coworkers } from \"data/coworkers.data\";\n// import styles from \"./ContactsPage.module.scss\";\n// import { Accordion } from 'components/share/Accordion';\n\n\n// const ContactsPage = () => {\n\n\n//     return (\n//         <section className={styles.wrapper}>\n//             <Accordion dataArray={coworkers} />\n//         </section>\n\n//     );\n// }\n\n\n// export default ContactsPage;\n\n\n\n\n\n\n// 3-rd example\n/* global google */\nimport { GoogleMap, MarkerF, useLoadScript, InfoWindow } from \"@react-google-maps/api\";\n// import { useMemo } from \"react\";\nimport { useState } from \"react\";\nimport styles from \"./ContactsPage.module.scss\";\nimport { coworkers } from \"data\";\nimport { Link } from \"react-router-dom\";\n\n\nconst ContactsPage = () => {\n    //  load the Google Maps API script\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    });\n\n    // set a default center of the map\n    // const center = useMemo(() => ({ lat: 18.52043, lng: 73.856743 }), []);\n\n    // const center = useMemo(() => ({ lat: 49.842957, lng: 24.031111 }), []); // Lviv\n\n    // const customMarker = {\n    //     path: \"M29.395,0H17.636c-3.117,0-5.643,3.467-5.643,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759   c3.116,0,5.644-2.527,5.644-5.644V6.584C35.037,3.467,32.511,0,29.395,0z M34.05,14.188v11.665l-2.729,0.351v-4.806L34.05,14.188z    M32.618,10.773c-1.016,3.9-2.219,8.51-2.219,8.51H16.631l-2.222-8.51C14.41,10.773,23.293,7.755,32.618,10.773z M15.741,21.713   v4.492l-2.73-0.349V14.502L15.741,21.713z M13.011,37.938V27.579l2.73,0.343v8.196L13.011,37.938z M14.568,40.882l2.218-3.336   h13.771l2.219,3.336H14.568z M31.321,35.805v-7.872l2.729-0.355v10.048L31.321,35.805\",\n    //     fillColor: \"red\",\n    //     fillOpacity: 2,\n    //     strokeWeight: 1,\n    //     rotation: 0,\n    //     scale: 1,\n    // };\n\n\n    // mapRef: Stores the reference of the map component.\n    const [mapRef, setMapRef] = useState();\n    // isOpen: Manages the state of the InfoWindow component.\n    const [isOpen, setIsOpen] = useState(false);\n    // infoWindowData: Stores the necessary data of a specific marker.\n    const [infoWindowData, setInfoWindowData] = useState();\n\n\n    // Set the reference of the map component and set a default view of the map\n    const onMapLoad = (map) => {\n        setMapRef(map);\n\n        // LatLngBounds: It is an instance which represents a geographical rectangle from the points at its south-west and north-east corners.\n        const bounds = new google.maps.LatLngBounds();\n        // If you are getting an error google is not defined, then either use it like window.google.maps.LatLngBounds() or mention /* global google */ on the top of your file.\n\n        // extend method: It extends the map bounds to contain the given point.\n        coworkers?.forEach(({ latitude: lat, longitude: lng }) => bounds.extend({ lat, lng }));\n\n        // fitBounds method: It accepts the bounds as a parameter and sets the map viewport to contain the given bounds.\n        map.fitBounds(bounds);\n    };\n\n\n    // Set the clicked marker at the center position of the map by providing the latitude and longitude to the panTo method. Set the necessary data for a specific marker. Change the isOpen state to true to show the InfoWindow component\n    const handleMarkerClick = (id, lat, lng, name, city, email, phone) => {\n        mapRef?.panTo({ lat, lng });\n        setInfoWindowData({ id, name, city, email, phone });\n        setIsOpen(true);\n    };\n\n    return (\n        <section className={styles.app}>\n            {!isLoaded ? (\n                <h1>Loading...</h1>\n            ) : (\n                // the main component inside which all the other map components render\n                <GoogleMap\n                    mapContainerClassName={styles.map_container}\n                    // center={center}\n                    // sets the initial zoom level of the map\n                    // zoom={5.5}\n                    // onLoad={onLoad}\n                    onLoad={onMapLoad}\n                    onClick={() => setIsOpen(false)}\n                >\n                    {coworkers.map(({ id, latitude: lat, longitude: lng, name, city, email, phone }) =>\n                        <MarkerF\n                            key={id}\n                            className={styles.marker}\n                            position={{ lat, lng }}\n                            // icon={\"http://maps.google.com/mapfiles/ms/micons/info.png\"}\n                            // icon={\"http://maps.google.com/mapfiles/kml/pal4/icon53.png\"}\n                            icon={\"http://maps.google.com/mapfiles/kml/pal2/icon0.png\"}\n                            // icon={customMarker}\n                            onClick={() => { handleMarkerClick(id, lat, lng, name, city, email, phone) }}\n\n\n                        >\n                            {isOpen && infoWindowData?.id === id && (<InfoWindow\n                                className={styles.info_window}\n                                onCloseClick={() => { setIsOpen(false) }}\n                            >\n                                <div className={styles.infoData}>\n                                    <p>{infoWindowData.city}</p>\n                                    <p>{infoWindowData.name}</p>\n                                    <Link to={`tel:${infoWindowData.phone}`}>{infoWindowData.phone}</Link>\n                                    <Link to={`mailto:${infoWindowData.email}`}>{infoWindowData.email}</ Link>\n                                </div>\n                            </InfoWindow>)}\n                        </MarkerF>\n                    )}\n                </GoogleMap>\n\n            )}\n        </section>\n    );\n}\n\n\nexport default ContactsPage;","import React from 'react';\n\nimport ContactsPage from 'components/screens/ContactsPage';\n\nconst Contacts = () => {\n  return (\n    <>\n      <ContactsPage />\n    </>\n  )\n};\n\nexport default Contacts;\n"],"names":["isLoaded","useLoadScript","googleMapsApiKey","process","REACT_APP_GOOGLE_API_KEY","useState","mapRef","setMapRef","isOpen","setIsOpen","infoWindowData","setInfoWindowData","className","styles","mapContainerClassName","onLoad","map","bounds","google","maps","LatLngBounds","coworkers","lat","latitude","lng","longitude","extend","fitBounds","onClick","id","name","city","email","phone","position","icon","panTo","handleMarkerClick","onCloseClick","to"],"sourceRoot":""}