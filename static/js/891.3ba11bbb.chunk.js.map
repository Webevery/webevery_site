{"version":3,"file":"static/js/891.3ba11bbb.chunk.js","mappings":"iMACA,EAA0B,2BAA1B,EAAoE,qCAApE,EAA+G,4BAA/G,EAAmJ,yBAAnJ,EAAmL,wBAAnL,EAAwN,8BAAxN,EAA8P,yBAA9P,EAA+R,yB,mBCkI/R,EA3HkB,SAAC,GAAsD,IAApDA,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,kBAEpCC,GAAaC,EAAAA,EAAAA,IAAc,CAC/BC,iBAAkBC,CAAAA,SAAAA,aAAAA,WAAAA,iBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,2BAD1BJ,SAoBR,GAA4BK,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KAEA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KAsBMC,EAAa,SAACC,GAChB,IAAMC,EAAWC,OAAOC,KAAKH,GAAKI,MAAK,SAACC,GAAD,MAAmB,aAATA,CAAV,IACjCC,EAAMN,EAAIC,GAEVM,EAAYL,OAAOC,KAAKH,GAAKI,MAAK,SAACC,GAAD,MAAmB,cAATA,CAAV,IAClCG,EAAMR,EAAIO,GAEhB,QAAiBE,IAAbR,QAAwCQ,IAAdF,EAI9B,MAAO,CAAED,IAAAA,EAAKE,IAAAA,GAHVE,MAAM,0DAIb,EAYD,OACI,oBAASC,UAAWC,EAApB,SACMvB,GAIE,SAAC,KAAD,CACIwB,sBAAuBD,EAKvBE,OApDE,SAACC,GACfnB,EAAUmB,GAGV,IAAMC,EAAS,IAAIC,OAAOC,KAAKC,aAItB,OAATjC,QAAS,IAATA,GAAAA,EAAWkC,SAAQ,gBAAad,EAAb,EAAGL,SAA0BO,EAA7B,EAAkBD,UAAlB,OAAuCS,EAAOK,OAAO,CAAEf,IAAAA,EAAKE,IAAAA,GAA5D,IAGnBO,EAAIO,UAAUN,EACjB,EAyCeO,QAAS,kBAAMzB,GAAU,EAAhB,EAPb,SASKZ,EAAU6B,KAAI,SAACS,GACZ,IAAMC,EAAc1B,EAAWyB,GAE/B,OACI,SAAC,KAAD,CAEIE,SAAUD,EAGVE,KAAM,qDAENJ,QAAS,YAlCX,SAACC,GACvB,IAAMC,EAAc1B,EAAWyB,GACzB,OAAN7B,QAAM,IAANA,GAAAA,EAAQiC,MAAMH,GACdrC,EAAkBoC,GAClB1B,GAAU,EACb,CA6B4C+B,CAAkBL,EAAU,EAPjD,SAUK3B,IAAwB,OAAdV,QAAc,IAAdA,OAAA,EAAAA,EAAgB2C,MAAON,EAAQM,KAAO,SAAC,KAAD,CAC7CC,aAAc,WAAQjC,GAAU,EAAQ,EADK,UAG7C,iBAAKa,UAAWC,EAAhB,WACI,eAAGD,UAAWC,EAAd,UAA6BzB,EAAe6C,QAA5C,KAAuD7C,EAAe8C,SACtE,cAAGtB,UAAWC,EAAd,SAA4BzB,EAAe+C,QAC3C,cAAGvB,UAAWC,EAAd,SAAkCzB,EAAegD,cACjD,SAAC,KAAD,CAAMxB,UAAWC,EAAcwB,GAAE,cAASjD,EAAekD,OAAzD,SAAmElD,EAAekD,SAClF,SAAC,KAAD,CAAM1B,UAAWC,EAAcwB,GAAE,iBAAYjD,EAAemD,OAA5D,SAAsEnD,EAAemD,cAjBxFd,EAAQM,GAsBxB,OAvCL,wCA+Cf,E,UC/HD,EAA0B,8BCuB1B,EAlBqB,WAEjB,OAA4CpC,EAAAA,EAAAA,YAA5C,eAAOP,EAAP,KAAuBC,EAAvB,KAGA,OACI,gBAAKuB,UAAWC,EAAhB,UACI,SAAC,EAAD,CACI1B,UAAWqD,EAAAA,GACXpD,eAAgBA,EAChBC,kBAAmBA,KAKlC,ECTD,EARiB,WACf,OACE,+BACE,SAAC,EAAD,KAGL,C","sources":["webpack://webevery_site/./src/components/share/Locations/Locations.module.scss?9978","components/share/Locations/Locations.jsx","webpack://webevery_site/./src/components/screens/ContactsPage/ContactsPage.module.scss?ada3","components/screens/ContactsPage/ContactsPage.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Locations_wrapper__gbWJR\",\"mapСontainer\":\"Locations_mapСontainer__0DZSe\",\"infoData\":\"Locations_infoData__vXo4n\",\"place\":\"Locations_place__HbFPz\",\"name\":\"Locations_name__uWxR6\",\"profession\":\"Locations_profession__57GGe\",\"phone\":\"Locations_phone__zL2-I\",\"email\":\"Locations_email__CJkmH\"};","/* global google */\nimport { GoogleMap, MarkerF, useLoadScript, InfoWindow } from \"@react-google-maps/api\";\n// import { useMemo } from \"react\";\nimport { useState } from \"react\";\nimport styles from \"./Locations.module.scss\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Locations = ({ arrayData, infoWindowData, setInfoWindowData }) => {\n    //  load the Google Maps API script\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    });\n\n    // set a default center of the map\n    // const center = useMemo(() => ({ lat: 18.52043, lng: 73.856743 }), []);\n\n    // const center = useMemo(() => ({ lat: 49.842957, lng: 24.031111 }), []); // Lviv\n\n    // const customMarker = {\n    //     path: \"M29.395,0H17.636c-3.117,0-5.643,3.467-5.643,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759   c3.116,0,5.644-2.527,5.644-5.644V6.584C35.037,3.467,32.511,0,29.395,0z M34.05,14.188v11.665l-2.729,0.351v-4.806L34.05,14.188z    M32.618,10.773c-1.016,3.9-2.219,8.51-2.219,8.51H16.631l-2.222-8.51C14.41,10.773,23.293,7.755,32.618,10.773z M15.741,21.713   v4.492l-2.73-0.349V14.502L15.741,21.713z M13.011,37.938V27.579l2.73,0.343v8.196L13.011,37.938z M14.568,40.882l2.218-3.336   h13.771l2.219,3.336H14.568z M31.321,35.805v-7.872l2.729-0.355v10.048L31.321,35.805\",\n    //     fillColor: \"red\",\n    //     fillOpacity: 2,\n    //     strokeWeight: 1,\n    //     rotation: 0,\n    //     scale: 1,\n    // };\n\n\n    // mapRef: Stores the reference of the map component.\n    const [mapRef, setMapRef] = useState();\n    // isOpen: Manages the state of the InfoWindow component.\n    const [isOpen, setIsOpen] = useState(false);\n    // // infoWindowData: Stores the necessary data of a specific marker. Relocate to ContactsPages\n    // const [infoWindowData, setInfoWindowData] = useState();\n\n\n    // Set the reference of the map component and set a default view of the map\n    const onMapLoad = (map) => {\n        setMapRef(map);\n\n        // LatLngBounds: It is an instance which represents a geographical rectangle from the points at its south-west and north-east corners.\n        const bounds = new google.maps.LatLngBounds();\n        // If you are getting an error google is not defined, then either use it like window.google.maps.LatLngBounds() or mention /* global google */ on the top of your file.\n\n        // extend method: It extends the map bounds to contain the given point.\n        arrayData?.forEach(({ latitude: lat, longitude: lng }) => bounds.extend({ lat, lng }));\n\n        // fitBounds method: It accepts the bounds as a parameter and sets the map viewport to contain the given bounds.\n        map.fitBounds(bounds);\n    };\n\n\n    // Custom. Find values of keys latitude and longitude in object and return them as object.\n    const findLatLng = (obj) => {\n        const latitude = Object.keys(obj).find((item) => item === \"latitude\");\n        const lat = obj[latitude];\n\n        const longitude = Object.keys(obj).find((item) => item === \"longitude\");\n        const lng = obj[longitude];\n\n        if (latitude === undefined || longitude === undefined) {\n            alert(\"Your object must have properties latitude and longitude\");\n            return;\n        }\n        return { lat, lng }\n    }\n\n\n    // Set the clicked marker at the center position of the map by providing the latitude and longitude to the panTo method. Set the necessary data for a specific marker. Change the isOpen state to true to show the InfoWindow component\n    const handleMarkerClick = (element) => {\n        const coordinates = findLatLng(element);\n        mapRef?.panTo(coordinates);\n        setInfoWindowData(element);\n        setIsOpen(true);\n    };\n\n\n    return (\n        <section className={styles.wrapper}>\n            {!isLoaded ? (\n                <h1>Loading...</h1>\n            ) : (\n                // the main component inside which all the other map components render\n                <GoogleMap\n                    mapContainerClassName={styles.mapСontainer}\n                    // center={center}\n                    // sets the initial zoom level of the map\n                    // zoom={5.5}\n                    // onLoad={onLoad}\n                    onLoad={onMapLoad}\n                    onClick={() => setIsOpen(false)}\n                >\n                    {arrayData.map((element) => {\n                        const coordinates = findLatLng(element);\n\n                        return (\n                            <MarkerF\n                                key={element.id}\n                                position={coordinates}\n                                // icon={\"http://maps.google.com/mapfiles/ms/micons/info.png\"}\n                                // icon={\"http://maps.google.com/mapfiles/kml/pal4/icon53.png\"}\n                                icon={\"http://maps.google.com/mapfiles/kml/pal2/icon0.png\"}\n                                // icon={customMarker}\n                                onClick={() => { handleMarkerClick(element) }}\n                            >\n\n                                {isOpen && infoWindowData?.id === element.id && (<InfoWindow\n                                    onCloseClick={() => { setIsOpen(false) }}\n                                >\n                                    <div className={styles.infoData}>\n                                        <p className={styles.place}>{infoWindowData.country}, {infoWindowData.city}</p>\n                                        <p className={styles.name}>{infoWindowData.name}</p>\n                                        <p className={styles.profession}>{infoWindowData.profession}</p>\n                                        <Link className={styles.phone} to={`tel:${infoWindowData.phone}`}>{infoWindowData.phone}</Link>\n                                        <Link className={styles.email} to={`mailto:${infoWindowData.email}`}>{infoWindowData.email}</ Link>\n                                    </div>\n                                </InfoWindow>)}\n\n                            </MarkerF>)\n                    }\n\n                    )}\n                </GoogleMap>\n\n            )}\n        </section>\n    );\n}\n\n\nexport default Locations;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsPage_wrapper__82k63\"};","import React, { useState } from 'react';\nimport { Locations } from \"components/share/Locations\";\nimport { coworkersData } from \"data\";\nimport styles from './ContactsPage.module.scss';\n\n\nconst ContactsPage = () => {\n    //infoWindowData from manual GoogleMap (for component Locations, relocated from it)  infoWindowData: Stores the necessary data of a specific marker.\n    const [infoWindowData, setInfoWindowData] = useState();\n\n\n    return (\n        <div className={styles.wrapper}>\n            <Locations\n                arrayData={coworkersData}\n                infoWindowData={infoWindowData}\n                setInfoWindowData={setInfoWindowData}\n            >\n            </Locations>\n        </div>\n    )\n}\n\n\nexport default ContactsPage;\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { InfoWindow } from \"@react-google-maps/api\";\n// import { Link } from \"react-router-dom\";\n// import { Locations } from \"components/share/Locations\";\n// import { coworkersData } from \"data\";\n// import styles from './ContactsPage.module.scss';\n\n\n// const ContactsPage = () => {\n//     // From manual GoogleMap (for component Locations)  infoWindowData: Stores the necessary data of a specific marker.\n//     const [infoWindowData, setInfoWindowData] = useState();\n//     // From manual GoogleMap (for component Locations) isOpen: Manages the state of the InfoWindow component.\n//     const [isOpen, setIsOpen] = useState(false);\n\n\n//     return (\n//         <div className={styles.wrapper}>\n//             <Locations\n//                 arrayData={coworkers}\n//                 setIsOpen={setIsOpen}\n//                 setInfoWindowData={setInfoWindowData}\n//             >\n//                 {isOpen && infoWindowData?.id && (<InfoWindow\n//                                     className={styles.info_window}\n//                                     onCloseClick={() => { setIsOpen(false) }}\n//                                 >\n//                                     <div className={styles.infoData}>\n//                                         <p>{infoWindowData.city}</p>\n//                                         <p>{infoWindowData.name}</p>\n//                                         <Link to={`tel:${infoWindowData.phone}`}>{infoWindowData.phone}</Link>\n//                                         <Link to={`mailto:${infoWindowData.email}`}>{infoWindowData.email}</ Link>\n//                                     </div>\n//                                 </InfoWindow>)}\n//             </Locations>\n//         </div>\n//     )\n// }\n\n\n// export default ContactsPage;","import React from 'react';\n\nimport ContactsPage from 'components/screens/ContactsPage';\n\nconst Contacts = () => {\n  return (\n    <>\n      <ContactsPage />\n    </>\n  )\n};\n\nexport default Contacts;\n"],"names":["arrayData","infoWindowData","setInfoWindowData","isLoaded","useLoadScript","googleMapsApiKey","process","REACT_APP_GOOGLE_API_KEY","useState","mapRef","setMapRef","isOpen","setIsOpen","findLatLng","obj","latitude","Object","keys","find","item","lat","longitude","lng","undefined","alert","className","styles","mapContainerClassName","onLoad","map","bounds","google","maps","LatLngBounds","forEach","extend","fitBounds","onClick","element","coordinates","position","icon","panTo","handleMarkerClick","id","onCloseClick","country","city","name","profession","to","phone","email","coworkersData"],"sourceRoot":""}